#version 430 core
// Per-vertex inputs
layout(location = 0) in vec4 vPosition;
layout(location = 1) in vec3 vNormalIn;
layout(location = 2) in vec2 vTexCoordIn;
layout(location = 3) in vec3 vTanIn;
layout(location = 4) in vec3 vBitanIn;

// Uniform data inputs are the same for all vertices
uniform mat4 modelMat;
uniform mat4 invModelMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform vec3 cameraPosition;


uniform vec4 worldSpaceLightPos;// = {1,4.0,1.0,1};

// These per-vertex outputs must correspond to the per-fragment inputs in the fragment shader
out vec3 vNormalV;
out vec3 eyeSpaceLightPosV;
out vec3 eyeSpaceVertPosV;
out vec3 tanSpaceLightPosV;
out vec3 tanSpaceVertPosV;
out vec2 texCoord;
out vec3 tangentSpaceLightDirectionV;

void main()
{
	// Perform vertex transformations
    vec4 worldPos = modelMat * vPosition;
    gl_Position = projMat * viewMat * worldPos;
	
	// Vector from eye to vertex position, in eye-space
	eyeSpaceVertPosV = vec3(viewMat * modelMat * vPosition);
	// Vector from vertex position to light position, in eye-space
	eyeSpaceLightPosV = vec3(viewMat * worldSpaceLightPos);

	vec3 T   = normalize(mat3(modelMat) * vTanIn);
    vec3 B   = normalize(mat3(modelMat) * vBitanIn);
    vec3 N   = normalize(mat3(modelMat) * vNormalIn);
    mat3 worldTBN = transpose(mat3(T, B, N));

	mat3 mv3x3 = transpose(inverse(mat3(viewMat * modelMat)));
	vec3 vNormal_eyespace = normalize(mv3x3 * normalize(vNormalIn));
	vec3 vTangent_eyespace = normalize(mv3x3 * normalize(vTanIn));
	vec3 vBitangent_eyespace = normalize(mv3x3 * normalize(vBitanIn));

	mat3 TBN = mat3(vTangent_eyespace, vBitangent_eyespace, vNormal_eyespace);

	mat3 transposeTBN = transpose(TBN);

	tanSpaceVertPosV = vec3(0);//(TBN * eyeSpaceVertPosV);
	tanSpaceLightPosV = (transposeTBN * eyeSpaceLightPosV);

	tangentSpaceLightDirectionV = transposeTBN * normalize( eyeSpaceLightPosV - eyeSpaceVertPosV );


	vec3 lightDir = normalize(worldSpaceLightPos.xyz - vec3(worldPos));

	// Vertex normal, in eye-space
	vNormalV = normalize(transposeTBN * vNormal_eyespace);
	//vNormalV = vNormalIn;


	//Lee's Code
	//vertexPos = modelview * vertex
	//viewDir = -vertexPos;
	//viewDir = tbn * view;


	// Pass through the texture coordinate
	texCoord = vTexCoordIn;
}

